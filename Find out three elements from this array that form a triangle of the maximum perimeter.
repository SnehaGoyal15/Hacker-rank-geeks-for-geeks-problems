Given an array of non-negative integers. Find out three elements from this array that form a triangle of the maximum perimeter.
// Function to merge two halves
void merge(int arr[], int left, int mid, int right) {
    int i = left, j = mid + 1, k = 0;
    int temp[right - left + 1];

    while (i <= mid && j <= right) {
        if (arr[i] >= arr[j])  // Sorting in descending order
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }

    while (i <= mid)
        temp[k++] = arr[i++];
    while (j <= right)
        temp[k++] = arr[j++];

    for (i = left, k = 0; i <= right; i++, k++)
        arr[i] = temp[k];
}

// Merge Sort function
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

// Function to find the maximum perimeter triangle
void maxPerimeterTriangle(int arr[], int n) {
    // Sort array in descending order
    mergeSort(arr, 0, n - 1);

    // Check for the largest valid triangle
    for (int i = 0; i < n - 2; i++) {
        if (arr[i] < arr[i + 1] + arr[i + 2]) {
            printf("%d\n", arr[i] + arr[i + 1] + arr[i + 2]);
            return;
        }
    }
    printf("Triangle formation is not possible.\n");
}

int main() {
    int n;
    scanf("%d", &n);
    int arr[n];

    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    maxPerimeterTriangle(arr, n);
    return 0;
}
