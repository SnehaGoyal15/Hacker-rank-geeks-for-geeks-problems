#include <stdio.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void partitionArray(int arr[], int n, int *k) {
    int l = 0, r = n - 1;
    *k = 0;

    while (l < r) {
        while (l < n && arr[l] % 2 != 0) {  // Find first even number from left
            l++;
            (*k)++;
        }
        while (r >= 0 && arr[r] % 2 == 0) { // Find first odd number from right
            r--;
        }
        if (l < r) {
            swap(&arr[l], &arr[r]);
            l++;
            r--;
            (*k)++;
        }
    }
}

void sortDescending(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] < arr[j]) {
                swap(&arr[i], &arr[j]);
            }
        }
    }
}

void sortAscending(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] > arr[j]) {
                swap(&arr[i], &arr[j]);
            }
        }
    }
}

void sortOddEven(int arr[], int n) {
    int k;  // Count of odd numbers
    partitionArray(arr, n, &k); // Step 1: Partition

    sortDescending(arr, k);       // Step 2: Sort first k elements (odds) in descending order
    sortAscending(arr + k, n - k); // Step 3: Sort remaining elements (evens) in ascending order
}

int main() {
    int arr[] = {1, 2, 3, 5, 4, 7, 10};
    int n = sizeof(arr) / sizeof(arr[0]);

    sortOddEven(arr, n);

    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}
