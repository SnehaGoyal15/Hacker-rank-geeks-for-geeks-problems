#include <stdio.h>

// Swap function for QuickSort
void swap(int arr[][2], int i, int j) {
    int temp1 = arr[i][0], temp2 = arr[i][1];
    arr[i][0] = arr[j][0]; arr[i][1] = arr[j][1];
    arr[j][0] = temp1; arr[j][1] = temp2;
}

// QuickSort function to sort by start times
void quickSort(int arr[][2], int low, int high) {
    if (low >= high) return;
    int pivot = arr[high][0], i = low - 1;
    for (int j = low; j < high; j++) {
        if (arr[j][0] < pivot) { i++; swap(arr, i, j); }
    }
    swap(arr, i + 1, high);
    quickSort(arr, low, i);
    quickSort(arr, i + 2, high);
}

// Function to merge overlapping intervals
void mergeIntervals(int arr[][2], int n) {
    quickSort(arr, 0, n - 1);  // Sort intervals by start time

    int index = 0;
    for (int i = 1; i < n; i++) {
        if (arr[index][1] >= arr[i][0]) {  // Merge overlapping intervals
            if (arr[index][1] < arr[i][1]) arr[index][1] = arr[i][1];
        } else {  // Move to next non-overlapping interval
            index++;
            arr[index][0] = arr[i][0];
            arr[index][1] = arr[i][1];
        }
    }

    // Print merged intervals
    printf("Merged Intervals:\n");
    for (int i = 0; i <= index; i++)
        printf("[%d, %d] ", arr[i][0], arr[i][1]);
    printf("\n");
}

int main() {
    int n;
    printf("Enter number of intervals: ");
    scanf("%d", &n);

    int intervals[n][2];

    printf("Enter intervals (start end):\n");
    for (int i = 0; i < n; i++) {
        scanf("%d %d", &intervals[i][0], &intervals[i][1]);
    }

    mergeIntervals(intervals, n);
    return 0;
}






