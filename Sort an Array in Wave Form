#include <stdio.h>
Sort an array in wave form
// Function to swap two elements
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Merge function for Merge Sort
void merge(int arr[], int left, int mid, int right) {
    int i = left, j = mid + 1, k = 0;
    int temp[right - left + 1];

    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }

    while (i <= mid)
        temp[k++] = arr[i++];
    while (j <= right)
        temp[k++] = arr[j++];

    for (i = left, k = 0; i <= right; i++, k++)
        arr[i] = temp[k];
}

// Merge Sort function
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

// Function to convert sorted array into wave form
void waveSort(int arr[], int n) {
    mergeSort(arr, 0, n - 1); // Sort the array

    // Swap adjacent elements in pairs
    for (int i = 0; i < n - 1; i += 2)
        swap(&arr[i], &arr[i + 1]);
}

int main() {
    int n;
    scanf("%d", &n);
    int arr[n];

    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    waveSort(arr, n);

    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    
    printf("\n");
    return 0;
}
