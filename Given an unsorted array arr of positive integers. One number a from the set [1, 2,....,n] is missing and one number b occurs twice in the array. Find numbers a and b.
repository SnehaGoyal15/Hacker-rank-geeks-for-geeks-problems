#include <stdio.h>

// Merge function to merge two sorted halves
void merge(int arr[], int left, int mid, int right) {
    int i = left, j = mid + 1, k = 0;
    int temp[right - left + 1];

    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }

    while (i <= mid)
        temp[k++] = arr[i++];
    
    while (j <= right)
        temp[k++] = arr[j++];

    for (i = left, k = 0; i <= right; i++, k++)
        arr[i] = temp[k];
}

// Merge Sort function
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

// Function to find missing and repeating numbers
void findMissingAndRepeating(int arr[], int n) {
    mergeSort(arr, 0, n - 1); // Sort the array

    int missing = -1, repeating = -1;
    
    for (int i = 1; i < n; i++) {
        if (arr[i] == arr[i - 1]) // Repeating number
            repeating = arr[i];
        else if (arr[i] > arr[i - 1] + 1) // Missing number
            missing = arr[i - 1] + 1;
    }

    // If missing number is still -1, it must be n (last element missing)
    if (missing == -1)
        missing = (arr[n - 1] == n) ? 1 : n;

    printf("Repeating: %d\nMissing: %d\n", repeating, missing);
}

int main() {
    int n;
    scanf("%d", &n);
    int arr[n];

    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    findMissingAndRepeating(arr, n);
    return 0;
}
