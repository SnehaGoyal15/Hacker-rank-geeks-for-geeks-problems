#include <stdio.h>
#include <stdlib.h>

int compare(int a, int b) {
    return a - b;
}

void sort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (compare(arr[j], arr[j + 1]) > 0) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int isPossible(int stalls[], int n, int k, int minDist) {
    int cowsPlaced = 1, lastPos = stalls[0];
    for (int i = 1; i < n; i++) {
        if (stalls[i] - lastPos >= minDist) {
            cowsPlaced++;
            lastPos = stalls[i];
            if (cowsPlaced == k) return 1;
        }
    }
    return 0;
}

int findMaxMinDist(int stalls[], int n, int k) {
    sort(stalls, n);
    int low = 1, high = stalls[n - 1] - stalls[0], res = 0;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (isPossible(stalls, n, k, mid)) {
            res = mid;
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return res;
}

int main() {
    int n, k;
    printf("Enter number of stalls: ");
    scanf("%d", &n);
    int stalls[n];
    printf("Enter stall positions: ");
    for (int i = 0; i < n; i++) scanf("%d", &stalls[i]);
    printf("Enter number of cows: ");
    scanf("%d", &k);
    printf("Maximum minimum distance: %d\n", findMaxMinDist(stalls, n, k));
    return 0;
}
